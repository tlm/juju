// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/informers/core/v1 (interfaces: NamespaceInformer)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/client-go/listers/core/v1"
	cache "k8s.io/client-go/tools/cache"
	reflect "reflect"
)

// MockNamespaceInformer is a mock of NamespaceInformer interface
type MockNamespaceInformer struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceInformerMockRecorder
}

// MockNamespaceInformerMockRecorder is the mock recorder for MockNamespaceInformer
type MockNamespaceInformerMockRecorder struct {
	mock *MockNamespaceInformer
}

// NewMockNamespaceInformer creates a new mock instance
func NewMockNamespaceInformer(ctrl *gomock.Controller) *MockNamespaceInformer {
	mock := &MockNamespaceInformer{ctrl: ctrl}
	mock.recorder = &MockNamespaceInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceInformer) EXPECT() *MockNamespaceInformerMockRecorder {
	return m.recorder
}

// Informer mocks base method
func (m *MockNamespaceInformer) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer
func (mr *MockNamespaceInformerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockNamespaceInformer)(nil).Informer))
}

// Lister mocks base method
func (m *MockNamespaceInformer) Lister() v1.NamespaceLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lister")
	ret0, _ := ret[0].(v1.NamespaceLister)
	return ret0
}

// Lister indicates an expected call of Lister
func (mr *MockNamespaceInformerMockRecorder) Lister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lister", reflect.TypeOf((*MockNamespaceInformer)(nil).Lister))
}
